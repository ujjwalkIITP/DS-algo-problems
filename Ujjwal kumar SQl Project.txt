SQL PROJECT AND QUERY ABOUT COMPANY'S EMPLOYEES, THEIR JOINING, BONUS
show databases;
use students;
create table Employee (
	EMPLOYEE_ID int Not Null Primary Key Auto_increment,
    FIRST_NAME char(25),
    LAST_NAME char(25),
    SALARY int (15),
    JOINING_DATE datetime,
    DEPARTMENT char(25)
);
insert into Employee
	(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) values
		(001, "Monika", "Arora", 10000, '14-02-20 09.00.09', 'HR'),
        (002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
		
show databases;
use students;
create table Bonus (
	EMPLOYEE_REF_ID int,
    BONUS_AMOUNT float(10),
    BONUS_DATE datetime,
    foreign key (EMPLOYEE_REF_ID)
		references Employee(Employee_ID)
	On delete cascade
);
insert into Bonus
	(EMPLOYEE_REF_ID, BONUS_AMOUNT, BONUS_DATE) values
        (001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');

show databases;
use students;
create table Emp_history (
	EMPLOYEE_REF_ID int,
    EMPLOYEE_TITLE char(25),
    AFFECTED_FROM datetime, 
    foreign key (Employee_REF_ID)
		references Employee(EMPLOYEE_ID)
	On delete cascade
);
insert into Emp_history
	(EMPLOYEE_REF_ID, EMPLOYEE_TITLE, AFFECTED_FROM) values
		(001, 'Manager', '2016-02-20 00:00:00'),
		(002, 'Executive', '2016-06-11 00:00:00'),
		(008, 'Executive', '2016-06-11 00:00:00'),
		(005, 'Manager', '2016-06-11 00:00:00'),
		(004, 'Asst. Manager', '2016-06-11 00:00:00'),
		(007, 'Executive', '2016-06-11 00:00:00'),
		(006, 'Lead', '2016-06-11 00:00:00'),
		(003, 'Lead', '2016-06-11 00:00:00');

Problems Solved in this Project:- 

Q-1. WRITE AN SQL QUERY TO FETCH “FIRST_NAME” FROM WORKER TABLE USING THE ALIAS NAME AS <WORKER_NAME>.

Q-2. WRITE AN SQL QUERY TO FETCH “FIRST_NAME” FROM WORKER TABLE IN UPPER CASE.

Q-3. WRITE AN SQL QUERY TO FETCH UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE.

Q-4. WRITE AN SQL QUERY TO PRINT THE FIRST THREE CHARACTERS OF  FIRST_NAME FROM WORKER TABLE.

Q-5. WRITE AN SQL QUERY TO FIND THE POSITION OF THE ALPHABET (‘A’) IN THE FIRST NAME COLUMN ‘AMITABH’ FROM WORKER TABLE.

Q-6. WRITE AN SQL QUERY TO PRINT THE FIRST_NAME FROM WORKER TABLE AFTER REMOVING WHITE SPACES FROM THE RIGHT SIDE.

Q-7. WRITE AN SQL QUERY TO PRINT THE DEPARTMENT FROM WORKER TABLE AFTER REMOVING WHITE SPACES FROM THE LEFT SIDE.

Q-8. WRITE AN SQL QUERY THAT FETCHES THE UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE AND PRINTS ITS LENGTH.

Q-9. WRITE AN SQL QUERY TO PRINT THE FIRST_NAME FROM WORKER TABLE AFTER REPLACING ‘A’ WITH ‘A’

Q-10. WRITE AN SQL QUERY TO PRINT THE FIRST_NAME AND LAST_NAME FROM WORKER TABLE INTO A SINGLE COLUMN COMPLETE_NAME. A SPACE CHAR SHOULD SEPARATE THEM.

Q-11. WRITE AN SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING.

Q-12. WRITE AN SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING AND DEPARTMENT DESCENDING.

Q-13. WRITE AN SQL QUERY TO PRINT DETAILS FOR WORKERS WITH THE FIRST NAME AS “VIPUL” AND “SATISH” FROM WORKER TABLE.

Q-14. WRITE AN SQL QUERY TO PRINT DETAILS OF WORKERS EXCLUDING FIRST NAMES, “VIPUL” AND “SATISH” FROM WORKER TABLE.

Q-15. WRITE AN SQL QUERY TO PRINT DETAILS OF WORKERS WITH DEPARTMENT NAME AS “ADMIN”.

Q-16. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME CONTAINS ‘A’.

Q-17. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH ‘A’.

Q-18. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH ‘H’ AND CONTAINS SIX ALPHABETS.

Q-19. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE SALARY LIES BETWEEN 100000 AND 500000.

Q-20. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO HAVE JOINED IN FEB’2014.

Q-21. WRITE AN SQL QUERY TO FETCH THE COUNT OF EMPLOYEES WORKING IN THE DEPARTMENT ‘ADMIN’.

Q-22. WRITE AN SQL QUERY TO FETCH WORKER NAMES WITH SALARIES >= 50000 AND <= 100000.

Q-23. WRITE AN SQL QUERY TO FETCH THE NO. OF WORKERS FOR EACH DEPARTMENT IN THE DESCENDING ORDER.

Q-24. WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO ARE ALSO MANAGERS.

Q-25. WRITE AN SQL QUERY TO FETCH DUPLICATE RECORDS HAVING MATCHING DATA IN SOME FIELDS OF A TABLE.

Q-26. WRITE AN SQL QUERY TO SHOW ONLY ODD ROWS FROM A TABLE.

Q-27. WRITE AN SQL QUERY TO SHOW ONLY EVEN ROWS FROM A TABLE.

Q-28. WRITE AN SQL QUERY TO CLONE A NEW TABLE FROM ANOTHER TABLE.

Q-29. WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF TWO TABLES.

Q-30. WRITE AN SQL QUERY TO SHOW RECORDS FROM ONE TABLE THAT ANOTHER TABLE DOES NOT HAVE.

Q-31. WRITE AN SQL QUERY TO SHOW THE CURRENT DATE AND TIME.

Q-32. WRITE AN SQL QUERY TO SHOW THE TOP N (SAY 10) RECORDS OF A TABLE.

Q-33. WRITE AN SQL QUERY TO DETERMINE THE NTH (SAY N=5) HIGHEST SALARY FROM A TABLE.

Q-34. WRITE AN SQL QUERY TO DETERMINE THE 5TH HIGHEST SALARY WITHOUT USING TOP OR LIMIT METHOD.

Q-35. WRITE AN SQL QUERY TO FETCH THE LIST OF EMPLOYEES WITH THE SAME SALARY.

Q-36. WRITE AN SQL QUERY TO SHOW THE SECOND HIGHEST SALARY FROM A TABLE.

Q-37. WRITE AN SQL QUERY TO SHOW ONE ROW TWICE IN RESULTS FROM A TABLE.

Q-38. WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF TWO TABLES.

Q-39. WRITE AN SQL QUERY TO FETCH THE FIRST 50% RECORDS FROM A TABLE.

Q-40. WRITE AN SQL QUERY TO FETCH THE DEPARTMENTS THAT HAVE LESS THAN FIVE PEOPLE IN IT.

Q-41. WRITE AN SQL QUERY TO SHOW ALL DEPARTMENTS ALONG WITH THE NUMBER OF PEOPLE IN THERE.

Q-42. WRITE AN SQL QUERY TO SHOW THE LAST RECORD FROM A TABLE.

Q-43. WRITE AN SQL QUERY TO FETCH THE FIRST ROW OF A TABLE.

Q-44. WRITE AN SQL QUERY TO FETCH THE LAST FIVE RECORDS FROM A TABLE.

Q-45. WRITE AN SQL QUERY TO PRINT THE NAME OF EMPLOYEES HAVING THE HIGHEST SALARY IN EACH DEPARTMENT.

Q-46. WRITE AN SQL QUERY TO FETCH THREE MAX SALARIES FROM A TABLE.

Q-47. WRITE AN SQL QUERY TO FETCH THREE MIN SALARIES FROM A TABLE.

Q-48. WRITE AN SQL QUERY TO FETCH NTH MAX SALARIES FROM A TABLE.

Q-49. WRITE AN SQL QUERY TO FETCH DEPARTMENTS ALONG WITH THE TOTAL SALARIES PAID FOR EACH OF THEM.

Q-50. WRITE AN SQL QUERY TO FETCH THE NAMES OF WORKERS WHO EARN THE HIGHEST SALARY.

# using databases named students 
USE Students;
select * from Employee;

select DEPARTMENT, count(EMPLOYEE_ID) No_of_Employee 
FROM Employee 
group by DEPARTMENT
Order by No_of_Employee desc;


select * from title;
select distinct E.FIRST_NAME, T.EMPLOYEE_TITLE
from Employee E
inner join title T
on E.Employee_ID = T.EMPLOYEE_REF_ID
and T.EMPLOYEE_TITLE in ('Manager');


select * from title;
select distinct E.Employee_ID, E.FIRST_NAME, T.EMPLOYEE_TITLE
from Employee E
inner join title T
on E.Employee_ID = T.EMPLOYEE_REF_ID;


select EMPLOYEE_TITLE, AFFECTED_FROM, COUNT(*)
from title
group by EMPLOYEE_TITLE, AFFECTED_FROM
having count(*) > 1;


select * from Employee 
where mod(EMPLOYEE_ID, 2) <> 0;
create table Employee_Clone like Employee;
select current_timestamp();


Select * from Employee 
Order by Salary desc limit 3;
select FIRST_NAME, SALARY from Employee Order by SALARY desc limit 4,1;
select * from EMPLOYEE
order by SALARY DESC;


SELECT DISTINCT E.EMPLOYEE_ID, E.FIRST_NAME, E.SALARY
from Employee E, Employee E1
where E.SALARY = E1.SALARY
and E.EMPLOYEE_ID != E1.EMPLOYEE_ID; 


select distinct SALARY from Employee
order by SALARY desc limit 1,1;


select * from Employee E 
UNION ALL
select * from Employee E1;


SELECT * FROM EMPLOYEE
WHERE EMPLOYEE_ID <= (SELECT count(EMPLOYEE_ID)/2 FROM EMPLOYEE);
SELECT DEPARTMENT, count(EMPLOYEE_ID) from Employee
GROUP BY DEPARTMENT having count(EMPLOYEE_ID) >3;


select * from Employee
where EMPLOYEE_ID = (select max(EMPLOYEE_ID) FROM Employee);


select concat(FIRST_NAME, " ", LAST_NAME) FULL_NAME, DEPARTMENT, max(SALARY) HIGHEST_SALARY from Employee
group by DEPARTMENT
ORDER BY SALARY DESC;